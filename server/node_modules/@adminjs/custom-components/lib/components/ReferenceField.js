"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
/* eslint-disable @typescript-eslint/no-explicit-any */
const design_system_1 = require("@adminjs/design-system");
const adminjs_1 = require("adminjs");
const react_1 = tslib_1.__importDefault(require("react"));
const useFetchOptions_1 = require("../utils/useFetchOptions");
const SingleReferenceField = props => {
    const { where } = props;
    if (where === 'edit') {
        return react_1.default.createElement(SingleReferenceEdit, Object.assign({}, props));
    }
    return react_1.default.createElement(adminjs_1.CleanPropertyComponent, Object.assign({}, props));
};
const SingleReferenceEdit = props => {
    var _a;
    const { property, record, onChange } = props;
    const { custom } = property;
    const { filters = {}, searchProperty = 'name', resourceId = property.reference, } = custom;
    if (!resourceId) {
        throw new Error('ReferenceField component must either be used on a reference field or be passed `resourceId` custom prop.');
    }
    const isMulti = property.isArray;
    const selectedRaw = adminjs_1.flat.get(record.params, property.path);
    const selectedIds = Array.isArray(selectedRaw)
        ? selectedRaw
        : [selectedRaw].filter(Boolean);
    const { search, error, selected } = (0, useFetchOptions_1.useFetchOptions)({
        filters,
        property,
        record,
        searchProperty,
        resourceId,
        selectedIds,
    });
    const handleChange = (type) => {
        if (!type) {
            onChange(property.path, null);
        }
        else if (Array.isArray(type)) {
            onChange(property.path, type.map(t => t.id));
        }
        else {
            onChange(property.path, type.id);
        }
    };
    const actualSelected = isMulti ? selected : (_a = selected[0]) !== null && _a !== void 0 ? _a : null;
    return (react_1.default.createElement(design_system_1.FormGroup, null,
        react_1.default.createElement(design_system_1.Label, { htmlFor: property.path }, property.label),
        react_1.default.createElement(design_system_1.SelectAsync, Object.assign({ value: actualSelected, cacheOptions: true, loadOptions: (input, callback) => {
                search(input).then(callback);
            }, onChange: handleChange, isDisabled: property.isDisabled, defaultOptions: true, getOptionLabel: (option) => { var _a, _b; return (_b = (_a = option.params) === null || _a === void 0 ? void 0 : _a[searchProperty]) !== null && _b !== void 0 ? _b : option[searchProperty]; }, getOptionValue: (option) => option.id, isMulti: isMulti !== null && isMulti !== void 0 ? isMulti : false, isClearable: true }, property.props)),
        react_1.default.createElement(design_system_1.FormMessage, { color: "error" }, error)));
};
exports.default = SingleReferenceField;
